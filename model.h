#ifndef MODEL_H
#define MODEL_H

extern const int LAYER0_KERNEL_DIM0 = 61;
extern const int LAYER0_KERNEL_DIM1 = 10;
int8_t LAYER0_KERNEL[]{-48, -24, 17, -10, 47, -65, -23, 64, 28, -41, -26, -31, 4, 4, 28, -49, 19, 34, 15, -18, -22, -26, 5, 5, 6, -36, 40, 12, 2, -2, -39, -6, 15, -8, 0, -13, 30, 7, -4, 1, -33, -12, -6, -4, -7, 4, 22, 6, -5, 8, -44, -21, -25, 4, -13, 23, 12, 11, 4, 2, -41, -23, -36, 22, -22, 11, 12, 6, 4, 3, -32, 3, -4, 18, -20, -10, 7, 7, 8, -3, -8, 16, 37, 17, 0, -33, 7, 2, 0, 5, -6, 10, 64, 21, 38, -23, 10, 0, -10, 2, -3, -1, 44, 29, 44, -2, 12, -5, -14, 3, 0, -3, 7, 21, 7, 12, 2, -8, -8, 2, 7, 0, -10, 9, -10, 14, -4, -7, -4, 3, 7, 9, 2, -1, 0, 18, -5, 0, 1, -1, 3, 9, 11, 1, 10, 16, 2, 4, 3, -4, 5, -1, 10, 10, 11, 6, 8, 6, 2, -1, 9, -5, 4, 14, 15, -2, 8, 0, 2, 2, 6, -4, 5, 5, 14, 2, 1, 1, 11, 0, 3, -4, 3, 1, 2, 3, 0, 5, 9, -1, 0, -3, 0, -2, -6, 3, 1, 2, 1, -2, 0, 0, 0, -5, -7, -1, 1, -4, -1, -2, 0, 3, 2, -9, -4, -3, -1, -4, 1, -3, 0, 1, 0, -8, -2, -2, -1, -2, 1, 0, 0, -1, -2, -4, -2, 0, 0, 1, 0, 1, 0, -2, -4, -2, -1, 0, 1, 0, 0, 3, 0, -1, -3, -3, 0, -1, 1, 1, -1, 3, -2, 1, 0, -3, 2, -3, 0, 3, -2, 2, -4, 2, 3, -2, 3, -3, 0, 4, -3, 1, -3, 1, 3, 1, 2, -3, -1, 3, -3, 1, -1, 0, 1, 0, -1, -2, -2, 1, -3, 1, -1, 2, 0, -1, -3, 0, -2, 0, -1, 0, -1, 2, 0, -1, -5, 1, -2, 0, -1, -1, 0, 2, 0, 1, -7, 1, 0, 0, -7, -2, 0, 2, 0, 3, -2, 0, 0, -2, -6, -2, 1, 4, 3, 3, 13, -1, -2, -2, 3, 0, 3, 3, 5, 5, 29, 1, -3, 3, 6, 2, 5, -8, 0, 11, 27, 5, 0, 6, -5, 7, 3, -7, 0, 10, 26, 7, 0, 0, -12, 6, 1, 2, 2, 3, 20, 2, -1, -10, -10, 3, -1, 11, 3, -7, 8, 0, -7, -7, 0, 0, 2, 7, 0, -12, -8, 0, -5, -4, 4, 0, 5, -4, -5, -13, -22, 2, -2, -6, 11, 1, 7, -17, -9, -10, -33, 1, 3, -10, 12, 2, 5, -22, -9, -8, -28, 1, 4, -12, 12, 2, 0, -19, -6, -11, -7, 0, 1, -10, 5, 0, -7, -13, 0, -23, 14, -1, -8, -3, 5, -5, -11, -6, 5, -32, 28, -3, -17, 3, -3, -6, -11, -7, 3, -25, 30, -6, -16, 4, -12, -2, -8, -10, -2, -11, 28, -10, -7, 2, -21, 6, -8, -11, -4, 3, 25, -9, 3, 3, -21, 7, -8, -15, -4, 17, 19, -4, 12, 6, -17, 3, -4, -23, -3, 33, 11, -1, 21, 2, -12, -3, 9, -41, -6, 47, -4, -2, 34, -10, -3, -8, 14, -51, 2, 46, -13, 4, 35, -18, 7, -25, 17, -56, 10, 42, -12, 13, 30, -31, 11, -36, 17, -56, 15, 37, -4, 27, 24, -31, 15, -40, 20, -64, 6, 35, -1, 22, 38, -44, 13, -21, 16, -63, 0, 20, 9, 19, 37, -33, 16, -15, 16, -65, -9, 11, 8, 14, 35, -19, 12, -9, 4, -53, -8, -13, 16, 14, 28, 5, 18, -11, -4, -36, -5, -24, 38, 9, 26, 19, 19, -8};
int8_t LAYER0_BIAS[]{-1, -1, -2, -1, 0, 2, 0, 1, 0, 0};

extern const int LAYER1_KERNEL_DIM0 = 10;
extern const int LAYER1_KERNEL_DIM1 = 4;
int8_t LAYER1_KERNEL[]{-15, 5, 14, 7, 25, -22, -12, -57, 11, -12, -13, 0, -14, -1, 14, 21, 15, -15, 3, -4, 13, -2, -13, -8, -8, 2, 13, -30, 3, 11, -8, 17, 24, -16, -25, 1, -14, 4, 19, 2};
int8_t LAYER1_BIAS[]{-16, 9, -3, -9};

extern const int SAMPLE_IN_LEN0 = 1;
extern const int SAMPLE_IN_LEN1 = 61;
float SAMPLE_INPUT_F[] = {0.000000, 0.000000, 0.000000, -0.110000, -0.100000, -0.095000, -0.075000, -0.050000, -0.055000, -0.020000, 0.015000, 0.045000, 0.025000, 0.010000, 0.020000, 0.025000, -0.005000, -0.010000, 0.010000, 0.050000, 0.040000, 0.015000, 0.020000, 0.020000, 0.005000, -0.015000, 0.005000, 0.025000, 0.025000, 0.025000, 0.040000, 0.055000, 0.035000, 0.015000, 0.015000, 0.075000, 0.045000, 0.015000, 0.025000, 0.070000, 0.035000, 0.045000, 0.060000, 0.090000, 0.090000, 0.070000, 0.100000, 0.130000, 0.130000, 0.115000, 0.110000, 0.120000, 0.075000, 0.015000, 0.020000, -0.055000, -0.110000, -0.090000, -0.055000, 0.005000, 0.025000, 0.090000, 0.175000, 0.305000, 0.350000, 0.465000, 0.530000, 0.685000, 0.780000, 0.925000, 0.985000, 1.125000, 1.195000, 1.350000, 1.415000, 1.515000, 1.565000, 1.680000, 1.740000, 1.635000, 1.350000, 0.670000, 0.395000, 0.055000, -0.050000, -0.195000, -0.225000, -0.245000, -0.285000, -0.345000, -0.345000, -0.360000, -0.370000, -0.400000, -0.395000, -0.390000, -0.415000, -0.480000, -0.480000, -0.495000, -0.525000, -0.595000, -0.615000, -0.650000, -0.675000, -0.725000, -0.725000, -0.725000, -0.755000, -0.790000, -0.795000, -0.780000, -0.790000, -0.775000, -0.775000, -0.820000, -0.865000, -0.930000, -0.955000, -0.915000, -0.925000, -0.965000, -0.965000, -0.975000, -0.990000, -0.995000, -0.990000, -1.015000, -1.020000, -1.005000, -1.010000, -0.975000, -0.985000, -1.005000, -0.995000, -0.935000, -0.920000, -0.900000, -0.865000, -0.780000, -0.730000, -0.670000, -0.635000, -0.540000, -0.500000, -0.480000, -0.485000, 0.000000, 0.000000, 0.000000};

float dequantize(int8_t x_q)
{
    float scale = 0.5097986056110052;
    float zero = 0.0;

    return scale * (x_q + zero);
}

void softmax(float *x, int rows, int cols)
{
    float sum = 0;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            x[i * cols + j] = expf(x[i * cols + j]);
            sum += x[i * cols + j];
        }
    }
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            x[i * cols + j] = x[i * cols + j] / sum;
        }
    }
}
void relu(float *x, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            x[i * cols + j] = x[i * cols + j] < 0.0f ? 0.0f : x[i * cols + j];
        }
    }
}

void sigmoid(float *x, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            x[i * cols + j] = 1 / (1 + expf(x[i * cols + j]));
        }
    }
}

void matmul(float *result, float *x, int8_t *y, int r1, int c1, int r2, int c2)
{
    if (c1 != r2)
    {
        return;
    }

    for (int i = 0; i < r1; i++)
    {
        for (int j = 0; j < c2; j++)
        {
            for (int k = 0; k < c1; k++)
            {
                result[i * c1 + j] += x[i * c1 + k] * dequantize(y[k * c2 + j]);
            }
        }
    }
}

int argmax(float *output, int len)
{
    int max_ind = 0;
    float max = output[max_ind];

    for (int i = 1; i < len; i++)
    {
        if (output[i] > max)
        {
            max = output[i];
            max_ind = i;
        }
    }
    return max_ind;
}
void dense(float *output, float *input, int8_t *kernel, int8_t *bias, int ir, int ic, int kr, int kc)
{
    matmul(output, input, kernel, ir, ic, kr, kc);
    for (int i = 0; i < ir; i++)
    {
        for (int j = 0; j < kc; j++)
        {
            output[i * kc + j] += dequantize(bias[i * kc + j]);
        }
    }

    sigmoid(output, ir, kc);
}

#endif